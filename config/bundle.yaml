apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: exporters.events.kubesphere.io
spec:
  group: events.kubesphere.io
  names:
    kind: Exporter
    listKind: ExporterList
    plural: exporters
    shortNames:
    - ex
    singular: exporter
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Exporter is the Schema for the exporter API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the specification of the desired behavior of the Exporter.
            properties:
              affinity:
                description: If specified, the pod's scheduling constraints.
                properties:
                  nodeAffinity:
                    description: Describes node affinity scheduling rules for the pod.
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                        items:
                          description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                          properties:
                            preference:
                              description: A node selector term, associated with the corresponding weight.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            weight:
                              description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - preference
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                        properties:
                          nodeSelectorTerms:
                            description: Required. A list of node selector terms. The terms are ORed.
                            items:
                              description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            type: array
                        required:
                        - nodeSelectorTerms
                        type: object
                    type: object
                  podAffinity:
                    description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                        items:
                          description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          properties:
                            podAffinityTerm:
                              description: Required. A pod affinity term, associated with the corresponding weight.
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources, in this case pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaces:
                                  description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            weight:
                              description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - podAffinityTerm
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        items:
                          description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                          properties:
                            labelSelector:
                              description: A label query over a set of resources, in this case pods.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            namespaces:
                              description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                              items:
                                type: string
                              type: array
                            topologyKey:
                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                              type: string
                          required:
                          - topologyKey
                          type: object
                        type: array
                    type: object
                  podAntiAffinity:
                    description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                        items:
                          description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          properties:
                            podAffinityTerm:
                              description: Required. A pod affinity term, associated with the corresponding weight.
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources, in this case pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaces:
                                  description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            weight:
                              description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - podAffinityTerm
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        items:
                          description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                          properties:
                            labelSelector:
                              description: A label query over a set of resources, in this case pods.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            namespaces:
                              description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                              items:
                                type: string
                              type: array
                            topologyKey:
                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                              type: string
                          required:
                          - topologyKey
                          type: object
                        type: array
                    type: object
                type: object
              image:
                description: Docker image of events exporter
                type: string
              imagePullPolicy:
                description: Image pull policy. One of Always, Never, IfNotPresent.
                type: string
              nodeSelector:
                additionalProperties:
                  type: string
                description: Define which Nodes the Pods are scheduled on.
                type: object
              resources:
                description: Resources defines resources requests and limits for single Pod.
                properties:
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                    type: object
                type: object
              sinks:
                description: Sinks defines details of events sinks
                properties:
                  stdout:
                    description: Stdout represents whether to write events to stdout. Output when configure an empty struct `{}`, but do nothing when no configuration
                    type: object
                  webhooks:
                    description: Webhooks is a list of ExporterWebhookSink
                    items:
                      description: ExporterWebhookSink defines parameters for webhook sink of Events Exporter.
                      properties:
                        service:
                          description: '`service` is a reference to the service for this webhook. Either `service` or `url` must be specified. If the webhook is running within the cluster, then you should use `service`.'
                          properties:
                            name:
                              description: '`name` is the name of the service.'
                              type: string
                            namespace:
                              description: '`namespace` is the namespace of the service.'
                              type: string
                            path:
                              description: '`path` is an optional URL path which will be sent in any request to this service.'
                              type: string
                            port:
                              description: '`port` is the port on the service and should be a valid port number (1-65535, inclusive).'
                              type: integer
                          required:
                          - name
                          - namespace
                          type: object
                        url:
                          description: '`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.'
                          type: string
                      type: object
                    type: array
                type: object
              tolerations:
                description: If specified, the pod's tolerations.
                items:
                  description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                      type: string
                    operator:
                      description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                      type: string
                  type: object
                type: array
            required:
            - image
            type: object
          status:
            description: ExporterStatus defines the observed state of Exporter
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: rulers.events.kubesphere.io
spec:
  group: events.kubesphere.io
  names:
    kind: Ruler
    listKind: RulerList
    plural: rulers
    shortNames:
    - erl
    singular: ruler
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Ruler is the Schema for the ruler API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the specification of the desired behavior of the Ruler.
            properties:
              affinity:
                description: If specified, the pod's scheduling constraints.
                properties:
                  nodeAffinity:
                    description: Describes node affinity scheduling rules for the pod.
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                        items:
                          description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                          properties:
                            preference:
                              description: A node selector term, associated with the corresponding weight.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            weight:
                              description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - preference
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                        properties:
                          nodeSelectorTerms:
                            description: Required. A list of node selector terms. The terms are ORed.
                            items:
                              description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            type: array
                        required:
                        - nodeSelectorTerms
                        type: object
                    type: object
                  podAffinity:
                    description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                        items:
                          description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          properties:
                            podAffinityTerm:
                              description: Required. A pod affinity term, associated with the corresponding weight.
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources, in this case pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaces:
                                  description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            weight:
                              description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - podAffinityTerm
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        items:
                          description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                          properties:
                            labelSelector:
                              description: A label query over a set of resources, in this case pods.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            namespaces:
                              description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                              items:
                                type: string
                              type: array
                            topologyKey:
                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                              type: string
                          required:
                          - topologyKey
                          type: object
                        type: array
                    type: object
                  podAntiAffinity:
                    description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                        items:
                          description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          properties:
                            podAffinityTerm:
                              description: Required. A pod affinity term, associated with the corresponding weight.
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources, in this case pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaces:
                                  description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            weight:
                              description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - podAffinityTerm
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        items:
                          description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                          properties:
                            labelSelector:
                              description: A label query over a set of resources, in this case pods.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            namespaces:
                              description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                              items:
                                type: string
                              type: array
                            topologyKey:
                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                              type: string
                          required:
                          - topologyKey
                          type: object
                        type: array
                    type: object
                type: object
              image:
                description: Docker image of events ruler
                type: string
              imagePullPolicy:
                description: Image pull policy. One of Always, Never, IfNotPresent.
                type: string
              nodeSelector:
                additionalProperties:
                  type: string
                description: Define which Nodes the Pods are scheduled on.
                type: object
              replicas:
                description: Number of desired pods. Defaults to 1.
                format: int32
                type: integer
              resources:
                description: Resources defines resources requests and limits for single Pod.
                properties:
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                    type: object
                type: object
              ruleNamespaceSelector:
                description: Namespaces to be selected for Rules discovery. If unspecified, discover Rule instances from all namespaces.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
              ruleSelector:
                description: A selector to select Rules instances.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
              sinks:
                description: Sinks defines sinks detail of this ruler
                properties:
                  alertmanager:
                    description: An alertmanager sink to which events alerts will be sent. Deprecated, please use alertmanagers instead.
                    properties:
                      name:
                        description: '`name` is the name of the alertmanager service.'
                        type: string
                      namespace:
                        description: '`namespace` is the namespace of the alertmanager service.'
                        type: string
                      port:
                        description: '`port` is the port on the alertmanager service. Default to 9093. `port` should be a valid port number (1-65535, inclusive).'
                        type: integer
                      targetPort:
                        description: TargetPort is the port to access on the backend instances targeted by the alertmanager service. If this is not specified, the value of the 'port' field is used.
                        type: integer
                    required:
                    - name
                    - namespace
                    type: object
                  alertmanagers:
                    description: Alertmanager sinks to which events alerts will be sent.
                    items:
                      description: RulerAlertmanagerSink is a sink to alertmanager service on k8s
                      properties:
                        name:
                          description: '`name` is the name of the alertmanager service.'
                          type: string
                        namespace:
                          description: '`namespace` is the namespace of the alertmanager service.'
                          type: string
                        port:
                          description: '`port` is the port on the alertmanager service. Default to 9093. `port` should be a valid port number (1-65535, inclusive).'
                          type: integer
                        targetPort:
                          description: TargetPort is the port to access on the backend instances targeted by the alertmanager service. If this is not specified, the value of the 'port' field is used.
                          type: integer
                      required:
                      - name
                      - namespace
                      type: object
                    type: array
                  stdout:
                    description: Stdout can config write notifications or alerts to stdout; do nothing when no configuration
                    properties:
                      type:
                        description: Type represents that the sink is for notification or alert. Available values are `notification` and `alert`
                        type: string
                    required:
                    - type
                    type: object
                  webhooks:
                    description: Webhooks is a list of RulerWebhookSink to which notifications or alerts can sink
                    items:
                      description: RulerWebhookSink defines parameters for webhook sink of Events Ruler.
                      properties:
                        service:
                          description: '`service` is a reference to the service for this webhook. Either `service` or `url` must be specified. If the webhook is running within the cluster, then you should use `service`.'
                          properties:
                            name:
                              description: '`name` is the name of the service.'
                              type: string
                            namespace:
                              description: '`namespace` is the namespace of the service.'
                              type: string
                            path:
                              description: '`path` is an optional URL path which will be sent in any request to this service.'
                              type: string
                            port:
                              description: '`port` is the port on the service and should be a valid port number (1-65535, inclusive).'
                              type: integer
                          required:
                          - name
                          - namespace
                          type: object
                        type:
                          description: Type represents that the sink is for notification or alert. Available values are `notification` and `alert`
                          type: string
                        url:
                          description: '`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.'
                          type: string
                      required:
                      - type
                      type: object
                    type: array
                type: object
              tolerations:
                description: If specified, the pod's tolerations.
                items:
                  description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                      type: string
                    operator:
                      description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                      type: string
                  type: object
                type: array
            required:
            - image
            type: object
          status:
            description: RulerStatus defines the observed state of Ruler
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: rules.events.kubesphere.io
spec:
  group: events.kubesphere.io
  names:
    kind: Rule
    listKind: RuleList
    plural: rules
    shortNames:
    - er
    singular: rule
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Rule is the Schema for the Rule API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RuleSpec defines the desired state of Rule
            properties:
              rules:
                items:
                  description: EventRule describes a notification or alert rule
                  properties:
                    annotations:
                      additionalProperties:
                        type: string
                      description: 'Values of Annotations can use format string with the fields of the event. For example: `{"message": "%message"}`'
                      type: object
                    condition:
                      description: 'Condition is a string similar with the where part of sql. See supported grammar details on https://github.com/kubesphere/event-rule-engine#supported-grammer . For example: `type="Warning" and involvedObject.kind="Pod" and reason="FailedMount"`'
                      type: string
                    enable:
                      description: Enable is whether to enable the rule, default to `false`
                      type: boolean
                    labels:
                      additionalProperties:
                        type: string
                      description: Labels
                      type: object
                    name:
                      description: Name is simple name of rule
                      type: string
                    type:
                      description: Type represents that the rule is for notification or alert. Available values are `notification` and `alert`
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: RuleStatus defines the observed state of Rule
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-events-operator
  namespace: kubesphere-logging-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: kube-events-operator
rules:
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps
  resources:
  - services/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - events.kubesphere.io
  resources:
  - exporters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - events.kubesphere.io
  resources:
  - exporters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - events.kubesphere.io
  resources:
  - rulers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - events.kubesphere.io
  resources:
  - rulers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - events.kubesphere.io
  resources:
  - rules
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - events.kubesphere.io
  resources:
  - rules/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-events-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-events-operator
subjects:
- kind: ServiceAccount
  name: kube-events-operator
  namespace: kubesphere-logging-system
---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR2RENDQXFTZ0F3SUJBZ0lKQUpiMEJ2ZHZVa09ETUEwR0NTcUdTSWIzRFFFQkN3VUFNRWN4Q3pBSkJnTlYKQkFZVEFrTk9NUXN3Q1FZRFZRUUlEQUpJUWpFTE1Ba0dBMVVFQ2d3Q1VVTXhIakFjQmdOVkJBTU1GV3QxWW1VdApaWFpsYm5SekxXRmtiV2x6YzJsdmJqQWVGdzB5TVRBNE1UWXdPVEkwTkROYUZ3MHpNVEE0TVRRd09USTBORE5hCk1HVXhDekFKQmdOVkJBWVRBa05PTVFzd0NRWURWUVFJREFKSVFqRUxNQWtHQTFVRUNnd0NVVU14UERBNkJnTlYKQkFNTU0ydDFZbVV0WlhabGJuUnpMV0ZrYldsemMybHZiaTVyZFdKbGMzQm9aWEpsTFd4dloyZHBibWN0YzNsegpkR1Z0TG5OMll6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUo0dWZkVC9VSmtCCmQ5L1ArSHRPWkFHUmkrYmZXR0dVR0ZWMHhrOVA2c1ZFSk8xMTAybWVVMDhzcGNTWkZXU0tmRTlIVCswY2E5NkEKMUp3SWZiNkxCMnQ2Wk5mb0lWY01VdG85aEpIYlRXdHRZZE5FU3MwUEIrSktrY1pidy9UN0tnVXA4cDhUVTZKRgp3a2Z0TDRLdVdDSlZpeGkrNnEzVFdYV2dXQjNXaEF0NHdCdUZTK210R2hGamVWWEpwM3NBUGlWVXVJV1poUWVQCnhscS84LzI4ekJNV3poUHNzQ2EydWxTRlV3VytUSEsrTHloMm9PWjM3ZkR5dGpNK1JLMWlNdE4yZkxUc1QwdzkKWllaUFArQU4zZDRyTURtTDRyaG9VTVBJa0NrSjB3c2RZVVpIVnJvREhPUlhSVUlJbDdnNEJHaWpCTVRqbFZSYwoyZkZHaUhlM09HTUNBd0VBQWFPQmpEQ0JpVENCaGdZRFZSMFJCSDh3ZllJVmEzVmlaUzFsZG1WdWRITXRZV1J0CmFYTnphVzl1Z2k5cmRXSmxMV1YyWlc1MGN5MWhaRzFwYzNOcGIyNHVhM1ZpWlhOd2FHVnlaUzFzYjJkbmFXNW4KTFhONWMzUmxiWUl6YTNWaVpTMWxkbVZ1ZEhNdFlXUnRhWE56YVc5dUxtdDFZbVZ6Y0dobGNtVXRiRzluWjJsdQpaeTF6ZVhOMFpXMHVjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDZEFuYWFNYUc4Z01XU3gwdm5CdGd5CjFsalhzTUdZdnQ3TnJoT3JacWVtTUVSSkdjUHFVZGpJdks4L1RJVENYa2Rac3BGOGZSZHRUZHFWUnRpSFV4dUUKUGJ6M3Z5ejk5aVZ5OHIvODFPdUxEdUlVZkJuN1laRTBJZVZvMkdtTVFuODhCYXFwSjUvQzNGVXpvOTIxVkJIUAp4RzkvR2gyMjhMOElBamg1cW12R2dCQmJaT1FpaWlBZTJ5TU12Uy9teXNyUExXNndHUjRwLzdoYXlwenRzY0VOCmk1dmlNT1MxVUpvTU4wdGZPQytlc3VQclU5VldYRUIxU2xyZTNkOVc5dWdueCtGK3ZCY1EvNnZ3K3BuR1AwZmQKU3lwZmZZWDRpc1NrWllySU9TcFlZakJQdXVUWkFjemhIRFJtdFNTeHgxRksrczkwTm4rbndqTEZyUU40UisvLwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbmk1OTFQOVFtUUYzMzgvNGUwNWtBWkdMNXQ5WVlaUVlWWFRHVDAvcXhVUWs3WFhUCmFaNVRUeXlseEprVlpJcDhUMGRQN1J4cjNvRFVuQWg5dm9zSGEzcGsxK2doVnd4UzJqMkVrZHROYTIxaDAwUksKelE4SDRrcVJ4bHZEOVBzcUJTbnlueE5Ub2tYQ1IrMHZncTVZSWxXTEdMN3FyZE5aZGFCWUhkYUVDM2pBRzRWTAo2YTBhRVdONVZjbW5ld0ErSlZTNGhabUZCNC9HV3Ivei9iek1FeGJPRSt5d0pyYTZWSVZUQmI1TWNyNHZLSGFnCjVuZnQ4UEsyTXo1RXJXSXkwM1o4dE94UFREMWxoazgvNEEzZDNpc3dPWXZpdUdoUXc4aVFLUW5UQ3gxaFJrZFcKdWdNYzVGZEZRZ2lYdURnRWFLTUV4T09WVkZ6WjhVYUlkN2M0WXdJREFRQUJBb0lCQVFDVzFRWXZ3SFQrTVNRNQpTbnBLT2VtcWhUcStIMktMU1VnYTFJcjB2ZVBEenNMWG0yN0lXNnhjNXRuNnFXNTR2SVRrbzc5Vy9hN3VNREtMCnhwMEF3Rm1HNXVLWjdrTThXZ2YzQ29vSyt1N0w3VFZHMnV2b3ROaHpzMTlsb2NNdEt3SmFnakZUOW4zZFVsOTcKYm5QTFRLdkZzWVE5U0c5RzZTMTR1RGpOMnV0MmMySDJ0ZlVPR3N1a2ZENEhhK0wxRUpWdVpCeDZ5OFMrMDc3Lwp4RVdHQXl6NU9TK1FvOTBJV2h4ZFNoMncwa0taUTA2aHpkQUVMWjU1blBaWHMyaHA5dzJnMTJQZHNmU1AyQ2IrCk5jTmVpUFdneC8wSVJadkVjcmtUTkpKampCZmNMK1VxYzdDVVU0b2pNcnBuOHZTR3pzdEMzZjVRTU1TdXdyK2UKNnBscExIVEJBb0dCQU01bzhtNG1wMmJvYUx6QjY3MDd5QWNGeFl5cDNLZzY2elJGMDljd255TlplSkpmdlBiQQozS3Vyc2xaQ1AwUEZYZEhuSWVMU09oVi95UEdMRmsxcnJLSjR2Qnl1WXdZZzRhT2tJZFo4RjJNRWRIQVJuZGs1Cm9iSksyRjJmMVpsWGt2TEpjaGFWaTRKeHdONFU2bWxVd1NZYmFOV1ZmeHFoVEtWVmZMcmcwY0tKQW9HQkFNUXYKVGhRUXFRTk9zMkdhZG0xVTh3NUc1VjNuN1pCWS9ONHFGR3JCeGhpTy9TLzY5ZGQzS0xVbENYbXQ0aGNaVml3cwpuZjlOME0wd0hOYjVTdnVDN1pieEtpUkxNL1JFQUF5VCt0WjBndXlwUU9rbkpod3pJSjhpNTQ0dTB4TWNaWG16CjFtOHYxcks0ZUgzb3YrQ1VncjFrUHA2L3hpK2V5OGltYmg4Y2Q5aUxBb0dBTnBQM2JucllEdFRyUk9YOTRJYWIKS0lnMUtUR05BQXE4UUpFcUo1OWFwTzAyZlhYRk1IWGtvNXY5eHVNemVVY0p2TVBoNk9qdnBObXFGM3hRaEY0eApRckNzQk9Wemw1NUFLNVh0d0pvRlVSQlBmWWFhOTJKT3lDY1VPUVZYWkhtTWlKZ05pNzAxSzJQS3ZLNUpJVnJnCnk2TzV2NmdNK015bnlKdm5KRDdvR0FrQ2dZRUF1V1Z1NXIxYnl6bGJnWmhENUV4TUtTak1adkxmYVBML2ZEL04KN1psVFNEQVFpb0FpUlUxaFZkWTdYeGI0dXhXQmZ0dG5NRFpzWlF2YnBUZ1BLU0h3dngwRzB5ZVNZSHJHaFJ4dgpCcTB5Y00zOS9wZTFoeDYxN0UxQy8vVzJHTEJVSVMvWExGbk1EamNQL3dTdUYyQ2hNTE9FRGVkek5kdGQveTl3Cmo4d0tZY01DZ1lBanEzSWJKZEM4TjRPM25EUkt3Z0pMcnRBdnhoTVExZjBMYjFFRFphejFlWXhCcUUyOHk0NlAKQWJzcVhma00xaUhPOG1XMU1xLzdVL0s0di9pNW9WQ2wvbzl5M3lwNmtPeXNOZU5KWkFFS1oySGh5WmNmQzdXYwpYKzluWlBmaSt0ZVE2TWplMUF3VTNHdnRFekNGSmVkVCtaSmpsQUpnMDU5UTU2aUxsMmVRTnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  name: kube-events-admission
  namespace: kubesphere-logging-system
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: kube-events-admission
  namespace: kubesphere-logging-system
spec:
  ports:
  - port: 443
    targetPort: 9443
  selector:
    app: kube-events-operator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-events-operator
  namespace: kubesphere-logging-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kube-events-operator
  template:
    metadata:
      labels:
        app: kube-events-operator
    spec:
      containers:
      - args:
        - --config-reloader-image=jimmidyson/configmap-reload:v0.3.0
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: kubesphere/kube-events-operator:latest
        name: events-operator
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
        - mountPath: /etc/localtime
          name: host-time
          readOnly: true
      serviceAccountName: kube-events-operator
      volumes:
      - name: cert
        secret:
          secretName: kube-events-admission
      - hostPath:
          path: /etc/localtime
        name: host-time
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: kube-events-admission-mutate
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURiekNDQWxlZ0F3SUJBZ0lVSkIzTFlLZ0RyamwxSlhwb3ZyRXR2TTRPZjRBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1J6RUxNQWtHQTFVRUJoTUNRMDR4Q3pBSkJnTlZCQWdNQWtoQ01Rc3dDUVlEVlFRS0RBSlJRekVlTUJ3RwpBMVVFQXd3VmEzVmlaUzFsZG1WdWRITXRZV1J0YVhOemFXOXVNQjRYRFRJeE1EZ3hOakE1TWpRME0xb1hEVE14Ck1EZ3hOREE1TWpRME0xb3dSekVMTUFrR0ExVUVCaE1DUTA0eEN6QUpCZ05WQkFnTUFraENNUXN3Q1FZRFZRUUsKREFKUlF6RWVNQndHQTFVRUF3d1ZhM1ZpWlMxbGRtVnVkSE10WVdSdGFYTnphVzl1TUlJQklqQU5CZ2txaGtpRwo5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMkN5cjZDSS8vN1RsbHFqcjJhV0ZBd1FiRGVlb1I3TUt0VHR0CmMxVGlDWXBLNVNKZ0d6Q25relI4NS9rWTk2cC9WTTIrRHU2S2JTb24yQW82dU9pc05kT285ck5LMUxCVUxBUm0KRmtWdnVnRm9hRXY0Ykg2U3VmelFHaWpRRlQ3b3VVUkc0MDVhSWNzY2ljYkRISTJRWUFVY2JaOS9ZZmpiWVVuegpDdkYwMTBDcFlEZGk5Mk12SDBielA5d3F3UUJYdjhBYzlGOTROL0VQWXlINVRMcHE4cEtLU0wzbXF5eHkyRkFsCjZBbHJ2Yjl0Tm01cGpkOHo4VmptdVNHckZmbGFKS2xKUXBaSXJjYUU1d2hDbzFYMVR0WFZROFpKTGYzTzlremwKUjVuRGZOQVZzQllwS2R2VmFrMFpkai9aYmtTdlhRTVBtcFlGRjdqenZVUy91Ny84MHdJREFRQUJvMU13VVRBZApCZ05WSFE0RUZnUVVoTzU5NHMzakErTVZCNStXeWZjczZ6czBha1F3SHdZRFZSMGpCQmd3Rm9BVWhPNTk0czNqCkErTVZCNStXeWZjczZ6czBha1F3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0MKQVFFQVVMbXNNbVZXdzg3QUhXU3g5eU5mMWswVXRFc3kvczE5YjRuSGxUazN0QXhNQVBQT29kNVg0dnk5SkFhagpQcnBwNHJoSHduWUVYVXozNEN1ekhveTcxTGIxck5CTTVrcFl0QXFaWkRTaVB2aVd2TnJES2E4TVQxNERIL2MvCklOK1BMbGJsb09kVko3bVdpdTNGVFk1ZndMZldmWktPbFZYOUpuWFhReEludHJWWnZpbDhLUDVsY29nWnQrRmoKZ3FkZ3hhOUhiL3Z5MkZqbjZNUElubjYzdXlhRmtkZzVteTZ3QllGUVo0b1grcUVOdTRMNE81bGpxSlVNTlcwawpJRFNueE05ZUxPMzRuMHBkaWtmaCtlV3ROSWlMdTRWNVpYK0h2cTYyR21xWnRobjBJV0tIajlzOXhQMkJNT01BCm9rN29hb0RoZ0hEM0k5M2xjVm5vUUZrNE1BPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    service:
      name: kube-events-admission
      namespace: kubesphere-logging-system
      path: /mutate-events-kubesphere-io-v1alpha1-rule
  failurePolicy: Fail
  name: mrule.kb.io
  rules:
  - apiGroups:
    - events.kubesphere.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - rules
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: kube-events-admission-validate
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURiekNDQWxlZ0F3SUJBZ0lVSkIzTFlLZ0RyamwxSlhwb3ZyRXR2TTRPZjRBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1J6RUxNQWtHQTFVRUJoTUNRMDR4Q3pBSkJnTlZCQWdNQWtoQ01Rc3dDUVlEVlFRS0RBSlJRekVlTUJ3RwpBMVVFQXd3VmEzVmlaUzFsZG1WdWRITXRZV1J0YVhOemFXOXVNQjRYRFRJeE1EZ3hOakE1TWpRME0xb1hEVE14Ck1EZ3hOREE1TWpRME0xb3dSekVMTUFrR0ExVUVCaE1DUTA0eEN6QUpCZ05WQkFnTUFraENNUXN3Q1FZRFZRUUsKREFKUlF6RWVNQndHQTFVRUF3d1ZhM1ZpWlMxbGRtVnVkSE10WVdSdGFYTnphVzl1TUlJQklqQU5CZ2txaGtpRwo5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMkN5cjZDSS8vN1RsbHFqcjJhV0ZBd1FiRGVlb1I3TUt0VHR0CmMxVGlDWXBLNVNKZ0d6Q25relI4NS9rWTk2cC9WTTIrRHU2S2JTb24yQW82dU9pc05kT285ck5LMUxCVUxBUm0KRmtWdnVnRm9hRXY0Ykg2U3VmelFHaWpRRlQ3b3VVUkc0MDVhSWNzY2ljYkRISTJRWUFVY2JaOS9ZZmpiWVVuegpDdkYwMTBDcFlEZGk5Mk12SDBielA5d3F3UUJYdjhBYzlGOTROL0VQWXlINVRMcHE4cEtLU0wzbXF5eHkyRkFsCjZBbHJ2Yjl0Tm01cGpkOHo4VmptdVNHckZmbGFKS2xKUXBaSXJjYUU1d2hDbzFYMVR0WFZROFpKTGYzTzlremwKUjVuRGZOQVZzQllwS2R2VmFrMFpkai9aYmtTdlhRTVBtcFlGRjdqenZVUy91Ny84MHdJREFRQUJvMU13VVRBZApCZ05WSFE0RUZnUVVoTzU5NHMzakErTVZCNStXeWZjczZ6czBha1F3SHdZRFZSMGpCQmd3Rm9BVWhPNTk0czNqCkErTVZCNStXeWZjczZ6czBha1F3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0MKQVFFQVVMbXNNbVZXdzg3QUhXU3g5eU5mMWswVXRFc3kvczE5YjRuSGxUazN0QXhNQVBQT29kNVg0dnk5SkFhagpQcnBwNHJoSHduWUVYVXozNEN1ekhveTcxTGIxck5CTTVrcFl0QXFaWkRTaVB2aVd2TnJES2E4TVQxNERIL2MvCklOK1BMbGJsb09kVko3bVdpdTNGVFk1ZndMZldmWktPbFZYOUpuWFhReEludHJWWnZpbDhLUDVsY29nWnQrRmoKZ3FkZ3hhOUhiL3Z5MkZqbjZNUElubjYzdXlhRmtkZzVteTZ3QllGUVo0b1grcUVOdTRMNE81bGpxSlVNTlcwawpJRFNueE05ZUxPMzRuMHBkaWtmaCtlV3ROSWlMdTRWNVpYK0h2cTYyR21xWnRobjBJV0tIajlzOXhQMkJNT01BCm9rN29hb0RoZ0hEM0k5M2xjVm5vUUZrNE1BPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    service:
      name: kube-events-admission
      namespace: kubesphere-logging-system
      path: /validate-events-kubesphere-io-v1alpha1-rule
  failurePolicy: Fail
  name: vrule.kb.io
  rules:
  - apiGroups:
    - events.kubesphere.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - rules
  sideEffects: None
